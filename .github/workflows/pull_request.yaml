name: Pull Request

on:
  pull_request:
    branches:
      - main

env:
  CONTAINER_FILE_PATH: docs/Dockerfile
  REGISTRY: docker.io

jobs:
  pr_metrics:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: PR Metrics
        uses: microsoft/PR-Metrics@v1.4.4
        env:
          PR_METRICS_ACCESS_TOKEN: ${{secrets.GITHUB_TOKEN}}
        continue-on-error: true
  link_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Link check
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          config-file: .github/md_config.json
  spell_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Spell check
        uses: errata-ai/vale-action@v2.0.1
        with:
          styles: https://github.com/errata-ai/write-good/releases/latest/download/write-good.zip
          files: docs
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  style_check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Style check
        uses: reviewdog/action-languagetool@v1
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          reporter: github-pr-review
          level: warning
          language: 'en-US'
          patterns: '**/*.md'
  build:
    runs-on: ubuntu-latest
    name: Build
    if: "! contains(toJSON(github.event.commits.*.message), '[skip-ci]')"    
    steps:
    - name: Check out code
      uses: actions/checkout@v3
      with:
        ref: ${{github.event.pull_request.head.sha}}

      # Setting up Helm binary
    - name: Set up Helm
      uses: azure/setup-helm@v3

    - name: Helm Lint
      run: |
        cd deployments/kubernetes/chart/workshop-exercise
        helm lint

    - name: Generate Tag
      id: generate_tag
      run: |
        sha=${{ github.event.pull_request.head.sha }}
        tag="SNAPSHOT-PR-${{ github.event.pull_request.number }}-${sha:0:8}"
        echo "##[set-output name=GIT_TAG;]$(echo ${tag})"

    - name: Generate image repository path
      run: |
        echo IMAGE_REPOSITORY=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

    - name: Build Image
      id: build-image
      uses: redhat-actions/buildah-build@v2
      with:
        image: ${{ env.IMAGE_REPOSITORY }}
        tags: ${{ steps.generate_tag.outputs.GIT_TAG }}
        dockerfiles: |
          ${{ env.CONTAINER_FILE_PATH  }}

    - name: Log in to the dockerhub
      uses: redhat-actions/podman-login@v1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.STAKATER_DOCKERHUB_USERNAME }}
        password: ${{ secrets.STAKATER_DOCKERHUB_PASSWORD }}

    - name: Push To dockerhub
      id: push-to-docker
      uses: redhat-actions/push-to-registry@v2
      with:
        image: ${{ steps.build-image.outputs.image }}
        tags: ${{ steps.build-image.outputs.tags }}
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.STAKATER_DOCKERHUB_USERNAME }}
        password: ${{ secrets.STAKATER_DOCKERHUB_PASSWORD }}

    - name: Comment on PR
      uses: mshick/add-pr-comment@v1
      env:
       GITHUB_TOKEN: ${{ secrets.STAKATER_GITHUB_TOKEN }}
      with:
        message: "@${{ github.actor }} Image is available for testing. `docker pull ${{ env.IMAGE_REPOSITORY }}:${{ steps.generate_tag.outputs.GIT_TAG }}`"
        allow-repeats: false
